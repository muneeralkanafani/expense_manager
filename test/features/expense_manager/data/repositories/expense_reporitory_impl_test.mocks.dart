// Mocks generated by Mockito 5.4.6 from annotations
// in expense_manager/test/features/expense_manager/data/repositories/expense_reporitory_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expense_manager/features/expense_manager/data/datasources/category_local_data_source.dart'
    as _i5;
import 'package:expense_manager/features/expense_manager/data/datasources/expense_local_data_source.dart'
    as _i2;
import 'package:expense_manager/features/expense_manager/data/datasources/tag_local_data_source.dart'
    as _i7;
import 'package:expense_manager/features/expense_manager/data/models/category_model.dart'
    as _i6;
import 'package:expense_manager/features/expense_manager/data/models/expense_model.dart'
    as _i4;
import 'package:expense_manager/features/expense_manager/data/models/tag_model.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ExpenseLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseLocalDataSource extends _i1.Mock
    implements _i2.ExpenseLocalDataSource {
  MockExpenseLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ExpenseModel>> getExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, []),
            returnValue: _i3.Future<List<_i4.ExpenseModel>>.value(
              <_i4.ExpenseModel>[],
            ),
          )
          as _i3.Future<List<_i4.ExpenseModel>>);

  @override
  _i3.Future<void> cacheExpenses(List<_i4.ExpenseModel>? expenses) =>
      (super.noSuchMethod(
            Invocation.method(#cacheExpenses, [expenses]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addExpense(_i4.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateExpense(_i4.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [CategoryLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryLocalDataSource extends _i1.Mock
    implements _i5.CategoryLocalDataSource {
  MockCategoryLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.CategoryModel>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i3.Future<List<_i6.CategoryModel>>.value(
              <_i6.CategoryModel>[],
            ),
          )
          as _i3.Future<List<_i6.CategoryModel>>);

  @override
  _i3.Future<void> cacheCategories(List<_i6.CategoryModel>? categories) =>
      (super.noSuchMethod(
            Invocation.method(#cacheCategories, [categories]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addCategory(_i6.CategoryModel? category) =>
      (super.noSuchMethod(
            Invocation.method(#addCategory, [category]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCategory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [TagLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagLocalDataSource extends _i1.Mock
    implements _i7.TagLocalDataSource {
  MockTagLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i8.TagModel>> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: _i3.Future<List<_i8.TagModel>>.value(<_i8.TagModel>[]),
          )
          as _i3.Future<List<_i8.TagModel>>);

  @override
  _i3.Future<void> cacheTags(List<_i8.TagModel>? tags) =>
      (super.noSuchMethod(
            Invocation.method(#cacheTags, [tags]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addTag(_i8.TagModel? tag) =>
      (super.noSuchMethod(
            Invocation.method(#addTag, [tag]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTag(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTag, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
