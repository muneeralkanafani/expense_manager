// Mocks generated by Mockito 5.4.6 from annotations
// in expense_manager/test/features/expense_manager/domain/usecases/add_category_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expense_manager/features/expense_manager/domain/entites/category.dart'
    as _i5;
import 'package:expense_manager/features/expense_manager/domain/entites/expense.dart'
    as _i4;
import 'package:expense_manager/features/expense_manager/domain/entites/tag.dart'
    as _i6;
import 'package:expense_manager/features/expense_manager/domain/repositories/expense_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i2.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Expense>> getAllExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#getAllExpenses, []),
            returnValue: _i3.Future<List<_i4.Expense>>.value(<_i4.Expense>[]),
          )
          as _i3.Future<List<_i4.Expense>>);

  @override
  _i3.Future<void> addExpense(_i4.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateExpense(_i4.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.Category>> getAllCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getAllCategories, []),
            returnValue: _i3.Future<List<_i5.Category>>.value(<_i5.Category>[]),
          )
          as _i3.Future<List<_i5.Category>>);

  @override
  _i3.Future<void> addCategory(_i5.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#addCategory, [category]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCategory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.Tag>> getAllTags() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTags, []),
            returnValue: _i3.Future<List<_i6.Tag>>.value(<_i6.Tag>[]),
          )
          as _i3.Future<List<_i6.Tag>>);

  @override
  _i3.Future<void> addTag(_i6.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#addTag, [tag]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTag(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTag, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
