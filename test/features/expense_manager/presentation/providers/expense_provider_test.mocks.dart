// Mocks generated by Mockito 5.4.6 from annotations
// in expense_manager/test/features/expense_manager/presentation/providers/expense_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:expense_manager/features/expense_manager/domain/entites/expense.dart'
    as _i5;
import 'package:expense_manager/features/expense_manager/domain/repositories/expense_repository.dart'
    as _i2;
import 'package:expense_manager/features/expense_manager/domain/usecases/add_expense.dart'
    as _i6;
import 'package:expense_manager/features/expense_manager/domain/usecases/delete_expense.dart'
    as _i8;
import 'package:expense_manager/features/expense_manager/domain/usecases/get_expenses.dart'
    as _i3;
import 'package:expense_manager/features/expense_manager/domain/usecases/update_expense.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeExpenseRepository_0 extends _i1.SmartFake
    implements _i2.ExpenseRepository {
  _FakeExpenseRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetExpenses].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpenses extends _i1.Mock implements _i3.GetExpenses {
  MockGetExpenses() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExpenseRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExpenseRepository);

  @override
  _i4.Future<List<_i5.Expense>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
          )
          as _i4.Future<List<_i5.Expense>>);
}

/// A class which mocks [AddExpense].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExpense extends _i1.Mock implements _i6.AddExpense {
  MockAddExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExpenseRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExpenseRepository);

  @override
  _i4.Future<void> call(_i5.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#call, [expense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UpdateExpense].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateExpense extends _i1.Mock implements _i7.UpdateExpense {
  MockUpdateExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExpenseRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExpenseRepository);

  @override
  _i4.Future<void> call(_i5.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#call, [expense]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteExpense].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteExpense extends _i1.Mock implements _i8.DeleteExpense {
  MockDeleteExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeExpenseRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ExpenseRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
